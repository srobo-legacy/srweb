//TITLE:	Motors
//DESCRIPTION:	Explains how to use the Student Robotics robot API to control motors.
//KEYWORDS:	python, robot, motor, programming, power
//CONTENT_TYPE:	markdown

Motors
======

The `motors` object is used to control a list of motors. As with `ruggeduinos` and `servos`, `motors` is a list. To do something with the **first motor** board, you would use:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
R.motors[0].something...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

...because indexes are 0-based (counting starts from 0, not 1).

When you have more than one motor board connected to your kit they will be ordered based upon their SR Part Code, as written on the underside of the board.


Setting motor power
-------------------

Motor power is controlled using [PWM](http://en.wikipedia.org/wiki/Pulse-width_modulation) with 100% power being a [duty cycle](http://en.wikipedia.org/wiki/Duty_cycle) of 1. You set the power with an integer value between -100 and 100 inclusive (where a negative value puts the motor in reverse). The field to change the output power is `power`. As each motor board has two outputs you will need to specify which output you want to control:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from sr import *
import time

R = Robot()

# motor 0, channel 0 to full power forward
R.motors[0].m0.power = 100

# motor 1, channel 0 to full power reverse
R.motors[1].m0.power = -100

# motor 0, channel 1 to half power forward
R.motors[0].m1.power = 50

# motor 1, channel 0 stopped
R.motors[1].m0.power = 0

# the following will put motor 0, channel 1 at 25% power (forwards) for 2.5 seconds:
R.motors[0].m1.power = 25
time.sleep(2.5)       # wait for 2.5 seconds
R.motors[0].m1.power = 0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can read the current power value for a motor using the same field:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# get the current output power of motor 0, channel 0
currentTarget = R.motors[0].m0.power
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
