//TITLE:	Ruggeduino custom firmware
//DESCRIPTION:	Explains how to use the Student Robotics robot API to interact with a Ruggeduino with customised firmware.
//KEYWORDS:	python, robot, arduino, ruggeduino, programming, custom firmware, firmware
//CONTENT_TYPE:	markdown

Custom firmware
===============

The Ruggeduino that came as part of your kit was shipped with a firmware that provides the functionality outlined in the [Ruggeduino](/docs/programming/sr/ruggeduinos) page.  You may wish to extend the functionality of this firmware, or completely replace it.  The `sr` library provides support for three Ruggeduino firmware scenarios:

 1. Default SR firmware
 2. Extended SR firmware: Firmwares that add commands to the default SR firmware.
 3. Completely custom: Any firmware not derived from the SR firmware.

By default, the `sr` library assumes that all connected Ruggeduinos are running the SR firmware.  If you wish to use an extended SR firmware, or completely custom firmware, then you need to tell the Robot object what to do with your Ruggeduino(s).  To do this, you will need to expand the initialisation of your Robot object as detailed [here](/docs/programming/sr/#CustomRobotInit).  Your code will then look something like this:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from sr import *

R = Robot.setup()

R.init()

R.wait_start()

# The rest of your code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The next step depends on whether you are running an extended SR firmware, or a completely custom firmware.

[Completely custom firmware](/docs/programming/sr/ruggeduinos/custom_firmware#completely) {#completely}
----------------------------

When configured correctly, the `Robot` object will perform absolutely no serial communications with a completely custom firmware.  We refer to this as *ignoring* a Ruggeduino.  To configure a `Robot` object to ignore a Ruggeduino with custom firmware, you will need to provide it with the Ruggeduino's ID.

The Ruggeduino ID is a 20 character string of mostly numbers, and is output in the robot log when you run a program on your robot with your
Ruggeduino connected.

After calling `Robot.setup()`, you should call the `ruggeduino_ignore_id` method of the robot object, with the ID as an argument. You'll need the ID later, so it's best to save it into a variable:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from sr import *

RUGGEDUINO_ID = "752303138333517171B1" # Replace this with the actual ID

R = Robot.setup()

R.ruggeduino_ignore_id( RUGGEDUINO_ID )

R.init()

R.wait_start()

# The rest of your code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you need to communicate with the Ruggeduino firmware, you will need its serial device path.  This is accessible after the `R.init()` call through the list of Ruggeduinos:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ... Robot.setup() ... etc.

R.init()

ruggeduino_device = R.ruggeduinos[RUGGEDUINO_ID].serial_dev

# Do your Ruggeduino initialisation here if you wish

R.wait_start()

# The rest of your code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You may wish to use pyserial to communicate with the Ruggeduino, in which case you could open it like so:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
import serial
from sr import *

RUGGEDUINO_ID = "752303138333517171B1"

R = Robot.setup()
R.ruggeduino_ignore_id( RUGGEDUINO_ID )
R.init()
R.wait_start()

ser = serial.Serial( R.ruggeduinos[RUGGEDUINO_ID].serial_dev )

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Refer to the [pyserial documentation](http://pyserial.sourceforge.net/) for more information on how to use pyserial.

[Extension of the SR firmware](/docs/programming/sr/ruggeduinos/custom_firmware#extension) {#extension}
------------------------------

If you wish to extend the SR firmware (which can be downloaded
[here](/resources/kit/ruggeduino-fw.ino) and loaded into the Arduino IDE for
modification), you can use the following process to integrate your new command
into the existing interface:

1. Extend the Ruggeduino class with an extra method to perform the command. You
   should lock the Ruggeduino object while receiving the result, in order to
   ensure that multiple threads can't send conflicting commands at once. You
   can call the "command" method of the Ruggeduino object in order to send the
   command character - you can send arguments by appending them to the command
   letter. You can use this example as a template:
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   class CustomisedRuggeduino(Ruggeduino):
       def do_custom_thing(self): # You can call this method whatever you want
   
           with self.lock: # This locks the Ruggeduino object
   
               result = self.command("c")
               # You can choose whichever command letter you want,
               # but ensure not to use one that is already being used
               # in the old firmware.
   
           return str(result)
           # You can also use float(result)
           # to return the result a floating-point number, for example.
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2. Tell the robot which class to use for custom Ruggeduino objects instead of
   the default. You can do this using the`ruggeduino_set_handler_by_fwver`method to use the firmware version string to tell it which Ruggeduinos to
   use, or by the ID using the`ruggeduino_set_handler_by_id`method.
   The firmware version is set to "SRcustom" in the firmware linked to above,
   but you may set it to any other string. Just be sure that it continues to
   output the colon after the version string.
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   from sr import *
   
   R = Robot.setup()
   
   # First argument is firmware version; second is the name of the class:
   R.ruggeduino_set_handler_by_fwver("SRcustom", CustomisedRuggeduino)
   # Alternatively, you can set the handler by the ID
   # R.ruggeduino_set_handler_by_id("752303138333517171B1", CustomisedRuggeduino)
   
   R.init()
   
   R.wait_start()
   
   # The rest of your code
   
   # You can then simply call the method you wrote whenever you need it
   R.ruggeduinos[0].do_custom_thing()
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
