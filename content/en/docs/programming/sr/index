//TITLE:	SR Module
//DESCRIPTION:	An introduction to the module provided by us
//KEYWORDS:	
//CONTENT_TYPE:	markdown

SR Module
=========

Student Robotics has written a module &mdash; _sr_  &mdash; which is used to interface with the hardware. It handles all the low-level interactions so you don't have to. To set the output power of output 0 of the first motor board to -30%, for example, you would simply write:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
R.motors[0].m0.power = -30
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

_-30_ would be backwards (depending upon which way you wired up the motor) &mdash; 30% power in reverse.

To gain access to all of this functionality, all you need to do is write:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from sr import *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

...at the top of your code (before you use any of its functionality, basically).
This imports the Student Robotics module that we've written to interface with our hardware.

Then, within the `sr` module, there is a `Robot` class that should be instantiated, as follows:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from sr import *
R = Robot()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Within your `Robot` (`R` in this case), you then have access to the following attributes:

* [motors](/docs/programming/sr/motors/)
* [power](/docs/programming/sr/power/)
* [servos](/docs/programming/sr/servos/)
* [ruggeduinos](/docs/programming/sr/ruggeduinos/)
* [vision](/docs/programming/sr/vision/)

They can be used in your code just like the example above. Note that `motors`, `ruggeduinos`, and `servos` are Python lists, and so should be accessed as such. Here are some examples:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
R.motors[0].m0.power = 50   # WILL work, if motor 0 exists
R.motors[1].m0.power = -20  # WILL work, if motor 1 exists
R.motors.m0.power = 42      # WON'T WORK

# the above is similar to the situation for 'ruggeduinos' and 'servos'


R.power.led[0] = 1       # WILL work
R.power.led = 0          # WON'T WORK
R.power[0].led[0] = 1    # WON'T WORK
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A number of examples in the documentation will assume you've instantiated the required `Robot` class and have called it `R`.
From here in, if you see a `R.something`, the requirement of the `sr` import line and the instantiation of `Robot` as `R` is implicit.

[Other Robot Attributes](/docs/programming/sr/#OtherRobotAttributes) {#OtherRobotAttributes}
----------------------

As well as the attributes listed above, the Robot class also has the following attributes, which you may find useful:

zone
:    The number of the zone that the robot is associated with.  An integer from 0 to 3 inclusive.

mode
:    Either "comp" or "dev".  When in a competition match, this will be "comp", and at all other times this will be "dev".

usbkey
:   The path to the USB memory stick.
    Your code is unzipped and run from a temporary directory, therefore files you create will be lost when the kit is turned off.
    You can use this to easily read from and write to files on the stick itself.
    Note that the USB memory stick is mounted synchronously, so any writes to it will block until complete and may slow down your code.

:   An example of how the `usbkey` attribute might be used:
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    from sr import *
    import os

    R = Robot()
    print "The path to the USB key is:", R.usbkey
    print "My file on the USB contains:"
    f = open(os.path.join(R.usbkey, "my-file.txt"), "r")
    print f.read()
    f.close()
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

